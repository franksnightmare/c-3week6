%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT

%right  '=' COMPADD COMPSUB COMPMUL
        COMPDIV COMPLSH COMPRSH
%left   '+' '-'
%left   '*' '/'
%right  '%' LSH RSH
%right  uMinus

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
;


expr:
    NUMBER
    {
        $$ = value();
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
	expr '*' expr
	{
		$$ = mul($1, $3);
	}
|
	expr '/' expr
	{
		$$ = div($1, $3);
	}
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }    
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }    
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
	expr COMPADD expr
	{
		$$ = assign($1, add($1, $3));
	}
|
	expr COMPSUB expr
	{
		$$ = assign($1, sub($1, $3));
	}
|
	expr COMPMUL expr
	{
		$$ = assign($1, mul($1, $3));
	}
|
	expr COMPDIV expr
	{
		$$ = assign($1, div($1, $3));
	}
|
	expr COMPLSH expr
	{
		$$ = assign($1, lsh($1, toInt($3)));
	}
|
	expr COMPRSH expr
	{
		$$ = assign($1, rsh($1, toInt($3)));
	}
|
	expr '%' expr
	{
		$$ = mod($1, toInt($3));
	}
|
	expr LSH expr
	{
		$$ = lsh($1, toInt($3));
	}
|
	expr RSH expr
	{
		$$ = lsh($1, toInt($3));
	}
;

