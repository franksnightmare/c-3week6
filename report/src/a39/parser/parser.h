// Generated by Bisonc++ V4.13.01 on Thu, 02 Mar 2017 10:17:34 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "../scanner/scanner.h"

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
        
    public:
        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
	
	// arithmetic functions:
	
		void display(double &value);
        void done();
        void prompt();
		RuleValue &exp(RuleValue &value);
		RuleValue &ln(RuleValue &value);
		RuleValue &sin(RuleValue &value);
		RuleValue &asin(RuleValue &value);
		RuleValue &sqrt(RuleValue &value);
		RuleValue &abs(RuleValue &value);
		
		RuleValue &deg(RuleValue &value);		
		RuleValue &grad(RuleValue &value);
		RuleValue &rad(RuleValue &deg);
		RuleValue &rad(RuleValue &grad);
		
		double const pi = 3.14159;
		double const e = 2.71828;
};


#endif
